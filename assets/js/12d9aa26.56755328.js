"use strict";(self.webpackChunkprogramacion_1=self.webpackChunkprogramacion_1||[]).push([[605],{2979:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"themes/threads/intro","title":"Introducci\xf3n","description":"Antes de entrar a herramientas m\xe1s avanzadas como Executor, Callable o Future, es importante comprender qu\xe9 son los hilos (threads) y c\xf3mo se crean de manera b\xe1sica en Java.","source":"@site/docs/themes/threads/01-intro.md","sourceDirName":"themes/threads","slug":"/themes/threads/intro","permalink":"/javaCue/docs/themes/threads/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/themes/threads/01-intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"siderbar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Hilos","permalink":"/javaCue/docs/category/hilos"},"next":{"title":"Executor","permalink":"/javaCue/docs/themes/threads/executor"}}');var i=a(4848),s=a(8453);const l={siderbar_position:1},o="Introducci\xf3n",t={},c=[{value:"\xbfQu\xe9 es un hilo?",id:"qu\xe9-es-un-hilo",level:2},{value:"Crear un hilo en Java",id:"crear-un-hilo-en-java",level:2},{value:"1. Extender la clase <code>Thread</code>",id:"1-extender-la-clase-thread",level:3},{value:"Posible salida",id:"posible-salida",level:3},{value:"2. Implementar la interfaz <code>Runnable</code>",id:"2-implementar-la-interfaz-runnable",level:3},{value:"Salida esperada",id:"salida-esperada",level:3},{value:"\xbfPor qu\xe9 usar hilos?",id:"por-qu\xe9-usar-hilos",level:2},{value:"Ejemplos",id:"ejemplos",level:2},{value:"Ejemplo 1: Reloj digital en consola",id:"ejemplo-1-reloj-digital-en-consola",level:3},{value:"Ejemplo 2: Simulaci\xf3n de descargas",id:"ejemplo-2-simulaci\xf3n-de-descargas",level:3},{value:"Ejemplo 3: Simulaci\xf3n de cajeros autom\xe1ticos",id:"ejemplo-3-simulaci\xf3n-de-cajeros-autom\xe1ticos",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2},{value:"Repositorio con ejemplos",id:"repositorio-con-ejemplos",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"introducci\xf3n",children:"Introducci\xf3n"})}),"\n",(0,i.jsxs)(n.p,{children:["Antes de entrar a herramientas m\xe1s avanzadas como ",(0,i.jsx)(n.strong,{children:"Executor"}),", ",(0,i.jsx)(n.strong,{children:"Callable"})," o ",(0,i.jsx)(n.strong,{children:"Future"}),", es importante comprender qu\xe9 son los ",(0,i.jsx)(n.strong,{children:"hilos (threads)"})," y c\xf3mo se crean de manera b\xe1sica en Java."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"qu\xe9-es-un-hilo",children:"\xbfQu\xe9 es un hilo?"}),"\n",(0,i.jsxs)(n.p,{children:["Un ",(0,i.jsx)(n.strong,{children:"hilo"})," es una unidad de ejecuci\xf3n dentro de un programa. Cuando ejecutamos un programa en Java, por defecto se crea un ",(0,i.jsx)(n.strong,{children:"hilo principal"})," llamado ",(0,i.jsx)(n.code,{children:"main"}),", que es el que ejecuta el m\xe9todo ",(0,i.jsx)(n.code,{children:"main()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Los hilos permiten que un programa realice ",(0,i.jsx)(n.strong,{children:"varias tareas al mismo tiempo"}),". Por ejemplo:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Escuchar m\xfasica mientras escribes en un documento."}),"\n",(0,i.jsx)(n.li,{children:"Descargar un archivo mientras navegas en internet."}),"\n",(0,i.jsx)(n.li,{children:"Que un videojuego actualice los gr\xe1ficos mientras calcula la f\xedsica del juego."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["En resumen: los hilos hacen posible la ",(0,i.jsx)(n.strong,{children:"concurrencia"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"crear-un-hilo-en-java",children:"Crear un hilo en Java"}),"\n",(0,i.jsx)(n.p,{children:"En Java existen dos formas principales de crear hilos:"}),"\n",(0,i.jsxs)(n.h3,{id:"1-extender-la-clase-thread",children:["1. Extender la clase ",(0,i.jsx)(n.code,{children:"Thread"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="EjemploThread.java" showLineNumbers',children:'class MiHilo extends Thread {\n    public void run() {\n        System.out.println("El hilo est\xe1 corriendo: " + Thread.currentThread().getName());\n    }\n}\n\npublic class EjemploThread {\n    public static void main(String[] args) {\n        MiHilo hilo1 = new MiHilo();\n        hilo1.start(); // Inicia el hilo\n\n        System.out.println("Hilo principal: " + Thread.currentThread().getName());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"posible-salida",children:"Posible salida"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Hilo principal: main\nEl hilo est\xe1 corriendo: Thread-0\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Observa que se ejecutan ",(0,i.jsx)(n.strong,{children:"dos hilos en paralelo"}),": el ",(0,i.jsx)(n.code,{children:"main"})," y ",(0,i.jsx)(n.code,{children:"Thread-0"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"2-implementar-la-interfaz-runnable",children:["2. Implementar la interfaz ",(0,i.jsx)(n.code,{children:"Runnable"})]}),"\n",(0,i.jsxs)(n.p,{children:["La interfaz ",(0,i.jsx)(n.strong,{children:"Runnable"})," es m\xe1s flexible porque permite separar la l\xf3gica del hilo de la clase principal."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="EjemploRunnable.java" showLineNumbers',children:'class MiRunnable implements Runnable {\n    public void run() {\n        System.out.println("Hilo ejecutado: " + Thread.currentThread().getName());\n    }\n}\n\npublic class EjemploRunnable {\n    public static void main(String[] args) {\n        Thread hilo1 = new Thread(new MiRunnable());\n        hilo1.start();\n\n        System.out.println("Hilo principal: " + Thread.currentThread().getName());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"salida-esperada",children:"Salida esperada"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Hilo principal: main\nHilo ejecutado: Thread-0\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"por-qu\xe9-usar-hilos",children:"\xbfPor qu\xe9 usar hilos?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Eficiencia"}),": mejoran el uso del procesador al aprovechar m\xfaltiples n\xfacleos."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multitarea"}),": permiten ejecutar varias acciones de manera casi simult\xe1nea."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Experiencia de usuario"}),": evitan que un programa se congele mientras hace tareas pesadas."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"ejemplos",children:"Ejemplos"}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-1-reloj-digital-en-consola",children:"Ejemplo 1: Reloj digital en consola"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="Reloj.java" showLineNumbers',children:'import java.time.LocalTime;\n\nclass Reloj implements Runnable {\n    public void run() {\n        try {\n            while (true) {\n                System.out.println("Hora actual: " + LocalTime.now());\n                Thread.sleep(1000); // espera 1 segundo\n            }\n        } catch (InterruptedException e) {\n            System.out.println("Reloj detenido.");\n        }\n    }\n}\n\npublic class RelojApp {\n    public static void main(String[] args) throws InterruptedException {\n        Thread reloj = new Thread(new Reloj());\n        reloj.start();\n\n        for (int i = 0; i < 5; i++) {\n            System.out.println("Hilo principal trabajando: " + i);\n            Thread.sleep(2000);\n        }\n    }\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Un hilo imprime la hora cada segundo, mientras el ",(0,i.jsx)(n.code,{children:"main"})," imprime un contador cada 2 segundos."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-2-simulaci\xf3n-de-descargas",children:"Ejemplo 2: Simulaci\xf3n de descargas"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="Descargas.java" showLineNumbers',children:'class Descarga implements Runnable {\n    private final String archivo;\n\n    public Descarga(String archivo) {\n        this.archivo = archivo;\n    }\n\n    public void run() {\n        System.out.println("Iniciando descarga de: " + archivo);\n        try {\n            Thread.sleep(3000); // simula descarga\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println("Descarga completada: " + archivo);\n    }\n}\n\npublic class GestorDescargas {\n    public static void main(String[] args) {\n        String[] archivos = {"video.mp4", "musica.mp3", "documento.pdf"};\n\n        for (String archivo : archivos) {\n            Thread hilo = new Thread(new Descarga(archivo));\n            hilo.start();\n        }\n\n        System.out.println("Gestor de descargas en ejecuci\xf3n...");\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Cada archivo se descarga en paralelo. El tiempo total es mucho menor que si fueran secuenciales."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-3-simulaci\xf3n-de-cajeros-autom\xe1ticos",children:"Ejemplo 3: Simulaci\xf3n de cajeros autom\xe1ticos"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="Cajeros.java" showLineNumbers',children:'class Cajero implements Runnable {\n    private final int id;\n    private final String cliente;\n\n    public Cajero(int id, String cliente) {\n        this.id = id;\n        this.cliente = cliente;\n    }\n\n    public void run() {\n        System.out.println("Cajero " + id + " atendiendo a " + cliente);\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println("Cajero " + id + " termin\xf3 con " + cliente);\n    }\n}\n\npublic class BancoSimulado {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(new Cajero(1, "Juan"));\n        Thread t2 = new Thread(new Cajero(2, "Mar\xeda"));\n        Thread t3 = new Thread(new Cajero(3, "Carlos"));\n\n        t1.start();\n        t2.start();\n        t3.start();\n\n        System.out.println("Banco atendiendo clientes...");\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Los tres cajeros trabajan al mismo tiempo, reduciendo el tiempo total de atenci\xf3n."}),"\n",(0,i.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,i.jsxs)(n.p,{children:["Los hilos son la base de la ",(0,i.jsx)(n.strong,{children:"programaci\xf3n concurrente en Java"}),". Antes de usar herramientas m\xe1s avanzadas, es fundamental entender:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Qu\xe9 son."}),"\n",(0,i.jsxs)(n.li,{children:["C\xf3mo crearlos con ",(0,i.jsx)(n.code,{children:"Thread"})," y ",(0,i.jsx)(n.code,{children:"Runnable"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Qu\xe9 beneficios ofrecen."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["En los siguientes temas veremos c\xf3mo simplificar el manejo de hilos con utilidades como ",(0,i.jsx)(n.strong,{children:"ExecutorService"}),", ",(0,i.jsx)(n.strong,{children:"Callable"})," y ",(0,i.jsx)(n.strong,{children:"Future"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"repositorio-con-ejemplos",children:"Repositorio con ejemplos"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/arlemorales23/hilos",children:"https://github.com/arlemorales23/hilos"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>o});var r=a(6540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);