"use strict";(self.webpackChunkprogramacion_1=self.webpackChunkprogramacion_1||[]).push([[461],{8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>s});var a=r(6540);const i={},o=a.createContext(i);function t(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(o.Provider,{value:n},e.children)}},9654:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"themes/threads/executor","title":"Executor","description":"En el tema anterior aprendimos a crear hilos usando Thread y Runnable. Sin embargo, cuando los programas empiezan a crecer, crear y manejar hilos manualmente se vuelve complicado. Aqu\xed es donde entra en juego ExecutorService, una herramienta que simplifica y organiza la ejecuci\xf3n de tareas concurrentes.","source":"@site/docs/themes/threads/02-executor.md","sourceDirName":"themes/threads","slug":"/themes/threads/executor","permalink":"/javaCue/docs/themes/threads/executor","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/themes/threads/02-executor.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"siderbar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introducci\xf3n","permalink":"/javaCue/docs/themes/threads/intro"},"next":{"title":"Callable","permalink":"/javaCue/docs/themes/threads/callable"}}');var i=r(4848),o=r(8453);const t={siderbar_position:2},s="Executor",c={},l=[{value:"\xbfQu\xe9 es un Executor?",id:"qu\xe9-es-un-executor",level:2},{value:"\xbfPor qu\xe9 usar Executor?",id:"por-qu\xe9-usar-executor",level:2},{value:"Creaci\xf3n de un ExecutorService",id:"creaci\xf3n-de-un-executorservice",level:2},{value:"Ejemplo 1: FixedThreadPool",id:"ejemplo-1-fixedthreadpool",level:2},{value:"Posible salida",id:"posible-salida",level:3},{value:"Ejemplo 2: SingleThreadExecutor",id:"ejemplo-2-singlethreadexecutor",level:2},{value:"Salida esperada",id:"salida-esperada",level:3},{value:"Ejemplo 3: CachedThreadPool",id:"ejemplo-3-cachedthreadpool",level:2},{value:"Caso pr\xe1ctico: Servidor de clientes",id:"caso-pr\xe1ctico-servidor-de-clientes",level:2},{value:"Posible salida",id:"posible-salida-1",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"executor",children:"Executor"})}),"\n",(0,i.jsxs)(n.p,{children:["En el tema anterior aprendimos a crear hilos usando ",(0,i.jsx)(n.code,{children:"Thread"})," y ",(0,i.jsx)(n.code,{children:"Runnable"}),". Sin embargo, cuando los programas empiezan a crecer, ",(0,i.jsx)(n.strong,{children:"crear y manejar hilos manualmente se vuelve complicado"}),". Aqu\xed es donde entra en juego ",(0,i.jsx)(n.strong,{children:"ExecutorService"}),", una herramienta que simplifica y organiza la ejecuci\xf3n de tareas concurrentes."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"qu\xe9-es-un-executor",children:"\xbfQu\xe9 es un Executor?"}),"\n",(0,i.jsxs)(n.p,{children:["Un ",(0,i.jsx)(n.strong,{children:"Executor"})," es un mecanismo que nos permite ejecutar tareas (c\xf3digo) en ",(0,i.jsx)(n.strong,{children:"hilos manejados autom\xe1ticamente"})," por Java. En lugar de crear hilos manualmente, nosotros solo definimos la tarea, y el executor decide:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Qu\xe9 hilo usar."}),"\n",(0,i.jsx)(n.li,{children:"Cu\xe1ndo ejecutarla."}),"\n",(0,i.jsx)(n.li,{children:"Si debe reutilizar un hilo ya existente."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Esto ahorra recursos y simplifica la vida del programador."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"por-qu\xe9-usar-executor",children:"\xbfPor qu\xe9 usar Executor?"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Eficiencia"}),": los hilos se reutilizan en un ",(0,i.jsx)(n.em,{children:"pool"})," (grupo de hilos)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplicidad"}),": no tienes que manejar directamente la creaci\xf3n y destrucci\xf3n de hilos."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Control"}),": puedes apagar el executor, cancelar tareas o programarlas."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Escalabilidad"}),": ideal para aplicaciones grandes con muchas tareas concurrentes."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"creaci\xf3n-de-un-executorservice",children:"Creaci\xf3n de un ExecutorService"}),"\n",(0,i.jsxs)(n.p,{children:["La clase ",(0,i.jsx)(n.code,{children:"Executors"})," provee m\xe9todos para crear diferentes tipos de ejecutores:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"newSingleThreadExecutor()"})," \u2192 un solo hilo."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"newFixedThreadPool(n)"})," \u2192 un conjunto fijo de hilos."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"newCachedThreadPool()"})," \u2192 hilos ilimitados que se crean seg\xfan necesidad."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"newScheduledThreadPool(n)"})," \u2192 permite programar tareas con retraso o peri\xf3dicas."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"ejemplo-1-fixedthreadpool",children:"Ejemplo 1: FixedThreadPool"}),"\n",(0,i.jsx)(n.p,{children:"Este tipo de executor mantiene un n\xfamero fijo de hilos."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="EjemploExecutor.java" showLineNumbers',children:'import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class EjemploExecutor {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        Runnable tarea1 = () -> System.out.println("Tarea 1 ejecutada por: " + Thread.currentThread().getName());\n        Runnable tarea2 = () -> System.out.println("Tarea 2 ejecutada por: " + Thread.currentThread().getName());\n        Runnable tarea3 = () -> System.out.println("Tarea 3 ejecutada por: " + Thread.currentThread().getName());\n\n        executor.execute(tarea1);\n        executor.execute(tarea2);\n        executor.execute(tarea3);\n\n        executor.shutdown();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"posible-salida",children:"Posible salida"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Tarea 1 ejecutada por: pool-1-thread-1\nTarea 2 ejecutada por: pool-1-thread-2\nTarea 3 ejecutada por: pool-1-thread-1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Los hilos se ",(0,i.jsx)(n.strong,{children:"reutilizan"})," para ejecutar m\xfaltiples tareas."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"ejemplo-2-singlethreadexecutor",children:"Ejemplo 2: SingleThreadExecutor"}),"\n",(0,i.jsx)(n.p,{children:"Este executor garantiza que todas las tareas se ejecuten en el mismo hilo y en orden."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="SingleThreadExecutor.java" showLineNumbers',children:'import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingleThreadExecutor {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n\n        for (int i = 1; i <= 3; i++) {\n            int finalI = i;\n            executor.execute(() -> System.out.println("Tarea " + finalI + " ejecutada por: " + Thread.currentThread().getName()));\n        }\n\n        executor.shutdown();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"salida-esperada",children:"Salida esperada"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Tarea 1 ejecutada por: pool-1-thread-1\nTarea 2 ejecutada por: pool-1-thread-1\nTarea 3 ejecutada por: pool-1-thread-1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Siempre es el ",(0,i.jsx)(n.strong,{children:"mismo hilo"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"ejemplo-3-cachedthreadpool",children:"Ejemplo 3: CachedThreadPool"}),"\n",(0,i.jsx)(n.p,{children:"Crea nuevos hilos seg\xfan necesidad, y reutiliza los que quedan libres."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="CachedThreadPool.java" showLineNumbers',children:'import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class CachedThreadPool {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newCachedThreadPool();\n\n        for (int i = 1; i <= 5; i++) {\n            int finalI = i;\n            executor.execute(() -> System.out.println("Tarea " + finalI + " ejecutada por: " + Thread.currentThread().getName()));\n        }\n\n        executor.shutdown();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Ideal cuando hay muchas tareas cortas y r\xe1pidas."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"caso-pr\xe1ctico-servidor-de-clientes",children:"Caso pr\xe1ctico: Servidor de clientes"}),"\n",(0,i.jsx)(n.p,{children:"Imagina que un banco tiene un servidor que atiende clientes. Cada cliente se atiende en un hilo, pero para no saturar el sistema, se limita el n\xfamero de hilos concurrentes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="ServidorBanco.java" showLineNumbers',children:'import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nclass Cliente implements Runnable {\n    private final int id;\n\n    public Cliente(int id) {\n        this.id = id;\n    }\n\n    public void run() {\n        System.out.println("Atendiendo cliente " + id + " en: " + Thread.currentThread().getName());\n        try {\n            Thread.sleep(2000); // Simula tiempo de atenci\xf3n\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        System.out.println("Cliente " + id + " atendido.");\n    }\n}\n\npublic class ServidorBanco {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(3);\n\n        for (int i = 1; i <= 10; i++) {\n            executor.execute(new Cliente(i));\n        }\n\n        executor.shutdown();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"posible-salida-1",children:"Posible salida"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Atendiendo cliente 1 en: pool-1-thread-1\nAtendiendo cliente 2 en: pool-1-thread-2\nAtendiendo cliente 3 en: pool-1-thread-3\nCliente 1 atendido.\nCliente 2 atendido.\nCliente 3 atendido.\nAtendiendo cliente 4 en: pool-1-thread-1\n...\n"})}),"\n",(0,i.jsxs)(n.p,{children:["El servidor atiende ",(0,i.jsx)(n.strong,{children:"hasta 3 clientes en paralelo"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Los ",(0,i.jsx)(n.strong,{children:"Executors"})," permiten manejar hilos de forma ordenada y eficiente."]}),"\n",(0,i.jsx)(n.li,{children:"Evitan tener que crear y destruir hilos manualmente."}),"\n",(0,i.jsx)(n.li,{children:"Permiten controlar la concurrencia en aplicaciones reales."}),"\n",(0,i.jsxs)(n.li,{children:["Son la base para tareas m\xe1s avanzadas con ",(0,i.jsx)(n.strong,{children:"Callable"})," y ",(0,i.jsx)(n.strong,{children:"Future"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);