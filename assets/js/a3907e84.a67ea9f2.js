"use strict";(self.webpackChunkprogramacion_1=self.webpackChunkprogramacion_1||[]).push([[320],{8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>t});var l=a(6540);const r={},s=l.createContext(r);function i(e){const n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),l.createElement(s.Provider,{value:n},e.children)}},9972:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"themes/threads/callable","title":"Callable","description":"Hasta ahora hemos visto c\xf3mo ejecutar tareas con Runnable y ExecutorService. Sin embargo, Runnable tiene una limitaci\xf3n importante: no puede devolver resultados ni lanzar excepciones. Para resolver esto, Java introduce la interfaz Callable.","source":"@site/docs/themes/threads/03-callable.md","sourceDirName":"themes/threads","slug":"/themes/threads/callable","permalink":"/javaCue/docs/themes/threads/callable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/themes/threads/03-callable.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"siderbar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Executor","permalink":"/javaCue/docs/themes/threads/executor"}}');var r=a(4848),s=a(8453);const i={siderbar_position:3},t="Callable",o={},c=[{value:"\xbfQu\xe9 es Callable?",id:"qu\xe9-es-callable",level:2},{value:"Diferencias entre Runnable y Callable",id:"diferencias-entre-runnable-y-callable",level:2},{value:"Ejemplo 1: Suma con Callable",id:"ejemplo-1-suma-con-callable",level:2},{value:"Salida esperada",id:"salida-esperada",level:3},{value:"Ejemplo 2: Simulaci\xf3n de descarga de archivos",id:"ejemplo-2-simulaci\xf3n-de-descarga-de-archivos",level:2},{value:"Posible salida",id:"posible-salida",level:3},{value:"Ejemplo 3: C\xe1lculos en paralelo",id:"ejemplo-3-c\xe1lculos-en-paralelo",level:2},{value:"Salida esperada",id:"salida-esperada-1",level:3},{value:"Caso pr\xe1ctico: Procesamiento de pedidos",id:"caso-pr\xe1ctico-procesamiento-de-pedidos",level:2},{value:"Posible salida",id:"posible-salida-1",level:3},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"callable",children:"Callable"})}),"\n",(0,r.jsxs)(n.p,{children:["Hasta ahora hemos visto c\xf3mo ejecutar tareas con ",(0,r.jsx)(n.code,{children:"Runnable"})," y ",(0,r.jsx)(n.code,{children:"ExecutorService"}),". Sin embargo, ",(0,r.jsx)(n.code,{children:"Runnable"})," tiene una limitaci\xf3n importante: ",(0,r.jsx)(n.strong,{children:"no puede devolver resultados ni lanzar excepciones"}),". Para resolver esto, Java introduce la interfaz ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Callable"})}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"qu\xe9-es-callable",children:"\xbfQu\xe9 es Callable?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Es una ",(0,r.jsx)(n.strong,{children:"interfaz funcional"})," que representa una tarea que puede ejecutarse en un hilo."]}),"\n",(0,r.jsxs)(n.li,{children:["A diferencia de ",(0,r.jsx)(n.code,{children:"Runnable"}),", el m\xe9todo principal ",(0,r.jsx)(n.code,{children:"call()"})," ",(0,r.jsx)(n.strong,{children:"devuelve un valor"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Puede lanzar excepciones controladas."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Su definici\xf3n es:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface Callable<V> {\n    V call() throws Exception;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Donde ",(0,r.jsx)(n.code,{children:"V"})," es el tipo de dato que devuelve la tarea."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"diferencias-entre-runnable-y-callable",children:"Diferencias entre Runnable y Callable"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Caracter\xedstica"}),(0,r.jsx)(n.th,{children:"Runnable"}),(0,r.jsx)(n.th,{children:"Callable"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"M\xe9todo principal"}),(0,r.jsx)(n.td,{children:"run()"}),(0,r.jsx)(n.td,{children:"call()"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Retorna valor"}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"\u2705 S\xed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Lanza excepciones"}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"\u2705 S\xed"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"ejemplo-1-suma-con-callable",children:"Ejemplo 1: Suma con Callable"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="EjemploCallable.java" showLineNumbers',children:'import java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class EjemploCallable {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n\n        Callable<Integer> tarea = () -> {\n            int suma = 0;\n            for (int i = 1; i <= 5; i++) {\n                suma += i;\n            }\n            return suma;\n        };\n\n        Future<Integer> resultado = executor.submit(tarea);\n\n        System.out.println("Resultado de la suma: " + resultado.get());\n\n        executor.shutdown();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"salida-esperada",children:"Salida esperada"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Resultado de la suma: 15\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Aqu\xed usamos ",(0,r.jsx)(n.code,{children:"Callable"})," para calcular un valor y obtenerlo con ",(0,r.jsx)(n.code,{children:"Future"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"ejemplo-2-simulaci\xf3n-de-descarga-de-archivos",children:"Ejemplo 2: Simulaci\xf3n de descarga de archivos"}),"\n",(0,r.jsx)(n.p,{children:"Cada descarga devuelve un mensaje cuando termina."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="DescargaCallable.java" showLineNumbers',children:'import java.util.concurrent.*;\n\nclass Descarga implements Callable<String> {\n    private final String archivo;\n\n    public Descarga(String archivo) {\n        this.archivo = archivo;\n    }\n\n    @Override\n    public String call() throws Exception {\n        System.out.println("Descargando: " + archivo);\n        Thread.sleep(2000); // simula tiempo de descarga\n        return "Descarga completa: " + archivo;\n    }\n}\n\npublic class DescargaCallableApp {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newFixedThreadPool(3);\n\n        Future<String> f1 = executor.submit(new Descarga("video.mp4"));\n        Future<String> f2 = executor.submit(new Descarga("musica.mp3"));\n        Future<String> f3 = executor.submit(new Descarga("documento.pdf"));\n\n        System.out.println(f1.get());\n        System.out.println(f2.get());\n        System.out.println(f3.get());\n\n        executor.shutdown();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"posible-salida",children:"Posible salida"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Descargando: video.mp4\nDescargando: musica.mp3\nDescargando: documento.pdf\nDescarga completa: video.mp4\nDescarga completa: musica.mp3\nDescarga completa: documento.pdf\n"})}),"\n",(0,r.jsx)(n.p,{children:"Cada tarea devuelve un mensaje cuando se completa."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"ejemplo-3-c\xe1lculos-en-paralelo",children:"Ejemplo 3: C\xe1lculos en paralelo"}),"\n",(0,r.jsx)(n.p,{children:"Supongamos que queremos calcular cuadrados de varios n\xfameros al mismo tiempo."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="CalculoCallable.java" showLineNumbers',children:'import java.util.concurrent.*;\nimport java.util.*;\n\npublic class CalculoCallable {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newFixedThreadPool(4);\n\n        List<Callable<Integer>> tareas = new ArrayList<>();\n        for (int i = 1; i <= 5; i++) {\n            int num = i;\n            tareas.add(() -> num * num);\n        }\n\n        List<Future<Integer>> resultados = executor.invokeAll(tareas);\n\n        for (Future<Integer> f : resultados) {\n            System.out.println("Resultado: " + f.get());\n        }\n\n        executor.shutdown();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"salida-esperada-1",children:"Salida esperada"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Resultado: 1\nResultado: 4\nResultado: 9\nResultado: 16\nResultado: 25\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Con ",(0,r.jsx)(n.code,{children:"invokeAll"}),", ejecutamos m\xfaltiples ",(0,r.jsx)(n.code,{children:"Callable"})," y recogemos todos los resultados."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"caso-pr\xe1ctico-procesamiento-de-pedidos",children:"Caso pr\xe1ctico: Procesamiento de pedidos"}),"\n",(0,r.jsx)(n.p,{children:"Imagina un sistema de compras donde cada pedido se procesa y devuelve una confirmaci\xf3n."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ProcesadorPedidos.java" showLineNumbers',children:'import java.util.concurrent.*;\n\nclass Pedido implements Callable<String> {\n    private final int id;\n\n    public Pedido(int id) {\n        this.id = id;\n    }\n\n    @Override\n    public String call() throws Exception {\n        System.out.println("Procesando pedido " + id);\n        Thread.sleep(1500); // Simula tiempo de procesamiento\n        return "Pedido " + id + " completado";\n    }\n}\n\npublic class ProcesadorPedidos {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newFixedThreadPool(3);\n\n        Future<String> p1 = executor.submit(new Pedido(101));\n        Future<String> p2 = executor.submit(new Pedido(102));\n        Future<String> p3 = executor.submit(new Pedido(103));\n\n        System.out.println(p1.get());\n        System.out.println(p2.get());\n        System.out.println(p3.get());\n\n        executor.shutdown();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"posible-salida-1",children:"Posible salida"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Procesando pedido 101\nProcesando pedido 102\nProcesando pedido 103\nPedido 101 completado\nPedido 102 completado\nPedido 103 completado\n"})}),"\n",(0,r.jsx)(n.p,{children:"Cada pedido se procesa en paralelo y devuelve un resultado."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Callable"})," ampl\xeda las capacidades de ",(0,r.jsx)(n.code,{children:"Runnable"})," al permitir ",(0,r.jsx)(n.strong,{children:"retornar valores y manejar excepciones"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Trabaja en conjunto con ",(0,r.jsx)(n.code,{children:"ExecutorService"})," y ",(0,r.jsx)(n.code,{children:"Future"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Es muy \xfatil en escenarios donde necesitas ",(0,r.jsx)(n.strong,{children:"recibir resultados"})," de tareas concurrentes."]}),"\n",(0,r.jsx)(n.li,{children:"Casos pr\xe1cticos: descargas, c\xe1lculos matem\xe1ticos, procesamiento de pedidos, simulaciones, etc."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);